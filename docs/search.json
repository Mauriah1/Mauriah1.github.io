[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/thirdandsix/index.html",
    "href": "posts/thirdandsix/index.html",
    "title": "Maryland data",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(cfbfastR)\n\n\n\n\nCode\ngamedata &lt;- load_cfb_pbp(\n  seasons = c(2019,2020,2021,2023,2024),\n  dbConnection = NULL,\n  tablename = NULL\n)\n\n\n\nFiltering out third and six data\n\\]\n\n\nCode\nthird_and_six &lt;- gamedata|&gt; filter(down == \"3\", distance == \"6\")\n\n\n\n\nCode\nthird_and_six |&gt; group_by(rush) |&gt; summarise(count=n()) \n\n\n# A tibble: 2 × 2\n   rush count\n  &lt;dbl&gt; &lt;int&gt;\n1     0  9396\n2     1  2570\n\n\nThere are 2570 rushing plays on 3rd and 6 and 9396 other type of plays that occur on 3rd and 6.\n\n\nPercentage of rushing plays on 3rd and 6.\n\n\nCode\n2570/11966*100 \n\n\n[1] 21.47752\n\n\n21% of plays on 3rd and 6 are run plays.\n\n\nWhat is the average yards gained?\n\n\nCode\nrushingdata &lt;- third_and_six |&gt; filter(rush == 1 ) \n\navg_yards_gained &lt;- rushingdata|&gt; \n  group_by(pos_team) |&gt; \n  summarise(avg_yards_gained = mean(yards_gained, na.rm = TRUE))\n\n\n\n\nHow many times has any team run on 3rd and 6 each year we have data for? Which team has done it the most?\n\n\nCode\ntotalrunson3and6 &lt;- rushingdata |&gt; group_by(pos_team, year) |&gt; summarise(count=n())\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\nCode\nyearbyyear &lt;-totalrunson3and6 |&gt; group_by(year) |&gt; summarise(count=n())\n\n\nIn 2019 there were 152 running plays, in 2020 there were 118 running plays, in 2021 there were 150 running plays, in 2023 there were 247 running plays and in 2024 there were 199 running plays on 3rd and 6.\nArmy has ran the most on 3rd and 6. In 2021 they ran the ball 17 times, on 3rd and 6.\n\n\nBar Chart of how many runs were on 3rd and 6 over the years.\n\n\nCode\nggplot() + \n  geom_bar(\n    data=yearbyyear, \n    aes(x=reorder(year, count),\n        weight=count)) + \n  labs(\n    title=\"How many runs occur on 3rd and 6?\", \n    x=\"Year\", \n    y=\"Count\") + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nMaryland data\n\n\nCode\nmd_data &lt;- third_and_six |&gt; filter(pos_team == \"Maryland\")\n\nmd_data |&gt; group_by(play_type, year) |&gt; summarise(count=n()) \n\n\n`summarise()` has grouped output by 'play_type'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 27 × 3\n# Groups:   play_type [11]\n   play_type                   year count\n   &lt;chr&gt;                      &lt;int&gt; &lt;int&gt;\n 1 Field Goal Good             2023     1\n 2 Fumble Recovery (Opponent)  2019     1\n 3 Interception Return         2021     1\n 4 Pass Incompletion           2020     4\n 5 Pass Incompletion           2021     3\n 6 Pass Incompletion           2024     2\n 7 Pass Reception              2019     2\n 8 Pass Reception              2020     4\n 9 Pass Reception              2021     1\n10 Pass Reception              2023     3\n# ℹ 17 more rows\n\n\n\nchanges over the years\n\n\nCode\nmdrushdata &lt;- rushingdata |&gt; filter(pos_team == \"Maryland\") |&gt; group_by(play_type, year) |&gt; summarise(count=n())\n\n\n`summarise()` has grouped output by 'play_type'. You can override using the\n`.groups` argument.\n\n\nIn 2021 and 2023 Maryland has ran the ball the most on 3rd and 6th, doing this 4 times each season. In 2019 and 2024 Maryland has not ran the ball much in 3rd and 6, only doing it 1 time so far.\n\n\nWhat percentage of the time does Maryland run the ball\n\n\nCode\n11/52*100\n\n\n[1] 21.15385\n\n\n21% percent of the time Maryland runs the ball on 3rd and 6, over the years. They had a total number of 11 rushing plays on third and six, and they had a total number of 52 plays in total on third and six.\n\n\nGraphing Maryland changes over the years\n\n\nCode\nggplot() + \n  geom_bar(\n    data=mdrushdata, \n    aes(x=reorder(year, count),\n        weight=count)) + \n  labs(\n    title=\"How many runs occur on 3rd and 6? for Maryland\", \n    x=\"Year\", \n    y=\"Count\") + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThis shows a lot!!! Maryland didn’t typically run the ball in 2019 that much on third and six, but in 2021 and 2023 they did more. However after that horrible play last year, it seems that Maryland has went back to not running the ball that much on third and six. However Maryland’s average for how many rushing plays they have is the same average as the average for total number of rushing plays for all teams, so they don’t typically run the ball that much on third and six like many other teams."
  },
  {
    "objectID": "posts/Volleyballpost/index.html",
    "href": "posts/Volleyballpost/index.html",
    "title": "Maryland’s Volleyball Points Explained",
    "section": "",
    "text": "###Load Libraries\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(waffle)\n\nmatches24 &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2024.csv\")\n\n\nRows: 5867 Columns: 39\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (34): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nSeperating Maryland’s Data\n\n\nCode\nmd_data &lt;- matches24 |&gt; filter(team == \"Maryland\")\n\n\n\n\nCalculating the total number of kills, blocks, aces and opponent errors for Maryland\n\n\nCode\ntotal_kills &lt;- sum(md_data$kills)\ntotal_blocks &lt;- sum(md_data$block_solos)\ntotal_aces &lt;- sum(md_data$aces)\ntotal_opponent_errors &lt;- sum(md_data$defensive_errors)\n\nmd &lt;- c(\"total_kill\"=716, \"total_blocks\"=25, \"total_aces\"=127, \"total_opponent_error\"=322)\n\n\n\n\nMaking a waffle chart for Maryland kills,blocks,aces and opponent errors.\n\n\nCode\nwaffle(\n        md/2, \n        rows = 10, \n        title=\"Maryland's stats\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"green\", \"red\",\"orange\", \"blue\")\n)\n\n\n\n\n\n\n\n\n\n\n\nCreating a waffle chart for Nebraska to Compare\n\n\nCode\nnb_data &lt;- matches24 |&gt; filter(team == \"Nebraska\")\n\ntotal_kills &lt;- sum(nb_data$kills)\ntotal_blocks &lt;- sum(nb_data$block_solos)\ntotal_aces &lt;- sum(nb_data$aces)\ntotal_opponent_errors &lt;- sum(nb_data$defensive_errors)\n\nnb &lt;- c(\"total_kill\"=701, \"total_blocks\"=23, \"total_aces\"=71, \"total_opponent_error\"=283)\n\nwaffle(\n        nb/2, \n        rows = 10, \n        title=\"Nebraska's stats\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"green\", \"red\",\"orange\", \"blue\")\n)\n\n\n\n\n\n\n\n\n\nComparing the differences between Maryland and Nebraska\n\n\nCode\nmd &lt;- c(\"total_kill\"=716, \"total_blocks\"=25, \"total_aces\"=127, \"total_opponent_error\"=322)\nnb &lt;- c(\"total_kill\"=701, \"total_blocks\"=23, \"total_aces\"=71, \"total_opponent_error\"=283, 112)\n\n\n\n\nCode\nwaffle(\n        nb/2, \n        rows = 10, \n        title=\"Nebraska's stats\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"green\", \"red\",\"orange\", \"blue\", \"white\")\n)\n\n\n\n\n\n\n\n\n\nCode\nwaffle(\n        md/2, \n        rows = 10, \n        title=\"Maryland's stats\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"green\", \"red\",\"orange\", \"blue\")\n)\n\n\n\n\n\n\n\n\n\nIn conclusion, most of Maryland’s points go towards kills, as this is the case for many other schools. Compared to Nebraska, Maryland has 15 more kills than Nebraska.They have around the same number of blocks, which showed me that blocks aren’t a regular statistic to gain. Aces though, Maryland is leading Nebraska with a 56 point deference. And in opponent errors it looks like Maryland’s opponents have made 39 more mistakes than Nebraska’s opponents. Maryland really thrives off their kills and aces."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/bigtenplays/index.html",
    "href": "posts/bigtenplays/index.html",
    "title": "Average Plays for the Big10",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nLogs23 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\")\n\n\nRows: 1702 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nLogs24 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs24.csv\")\n\n\nRows: 704 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nFilter out each big 10 team offensive play in the year of 2023\n\n\nCode\n  big10teams23 &lt;- Logs23|&gt; \n  group_by(Conference, Team) |&gt; \n  summarise(\n   OffensivePlays= sum(OffensivePlays),\n  ) |&gt;  filter(Conference == \"Big Ten Conference\") \n\n\n`summarise()` has grouped output by 'Conference'. You can override using the\n`.groups` argument.\n\n\nAll teams are mostly over 800 plays for the 2023 season besides Nebraska and Michigan State, Penn State and Michigan are really high in number of plays with 928 and 924 plays.\n\n\nFilter out each big 10 team offensive play in the year of 2024\n\n\nCode\nbig10teams24 &lt;- Logs24 |&gt; group_by(Conference, Team) |&gt; \n  summarise(\n    OffensivePlays= sum(OffensivePlays)\n  ) |&gt;  filter(Conference == \"Big Ten Conference\") \n\n\n`summarise()` has grouped output by 'Conference'. You can override using the\n`.groups` argument.\n\n\nThe season has not concluded so there is less data than in 2023, but from the data so far most teams have had over 300 plays besides UCLA and Purdue, while Indiana and Nebraska are at the top of the list.\n\n\nFind average plays for big 10 teams in 2023\n\n\nCode\navg_offensive_plays_2023 &lt;- big10teams23 |&gt;\n  group_by(Team) |&gt; \n  summarise(avg_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\n\n\nFind average plays for big 10 teams in 2023\n\n\nCode\navg_offensive_plays_2024 &lt;- big10teams24 |&gt; \n  group_by(Team) |&gt; \n  summarise(avg_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\n\n\nPlot the averages for the number of plays for the 2023 season\n\n\nCode\nggplot(avg_offensive_plays_2023, aes(x = reorder(Team, -avg_plays), y = avg_plays)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Average Offensive Plays per Game in 2023\", x = \"Team\", y = \"Average Plays\") +\n  theme_minimal() + \n  coord_flip()\n\n\n\n\n\n\n\n\n\nPenn State and Michigan, as expected is very high on the list, Michigan just won the championship. But Maryland is fourth from the top which shows they make a pretty good amount of plays. On the other hand Nebraska is very low which can show many things like maybe they had a problem with penalties, and couldn’t run a smooth offense or maybe there offense of line wasn’t good and the quaterback cant make many plays. The biggest lesson of this chart is that most of the teams who make more plays have a better record and tend to have a better season.\n\n\nPlot the averages for the number of plays for the 2024 season\n\n\nCode\nggplot(avg_offensive_plays_2024, aes(x = reorder(Team, -avg_plays), y = avg_plays)) +\n  geom_bar(stat = \"identity\", fill = \"darkorange\") +\n  labs(title = \"Average Offensive Plays per Game in 2024\", x = \"Team\", y = \"Average Plays\") +\n  theme_minimal() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nThe season has not concluded so there is much less plays compared to the year in 2023, however Nebraska looks to improve by a lot more compared to the last season. They are in the top of this chart, which means they are making many plays. This could be a significant increase unless they start the season off strong, moving their offense then later in the year get startled. However, Maryland is still near the top off plays which is pretty good."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/firstpost/index.html",
    "href": "posts/firstpost/index.html",
    "title": "First blog post",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nattendance &lt;- read_csv('https://dwillis.github.io/sports-data-files/attendance.csv')\n\n\nRows: 146 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Institution, Conference\ndbl (11): 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sportsblog",
    "section": "",
    "text": "How often can a team run less than 100 yards and still win?\n\n\n\n\n\n\n\n\n\n\n\nOct 22, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland’s Volleyball Points Explained\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nAverage Plays for the Big10\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nFirst blog post\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nthirdandsix\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 30, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/closerushingyards/index.html",
    "href": "posts/closerushingyards/index.html",
    "title": "How often can a team run less than 100 yards and still win?",
    "section": "",
    "text": "From 2011 to 2019, the number of close rushing wins for both Big 10 teams (red line) and others (orange line) followed a relatively similar, stable path, with Big 10 teams trailing slightly. However, starting in 2020, something remarkable happened. Big 10 teams began to pull ahead, surging to a peak in 2022 that far surpassed their previous years. Their close rushing wins nearly doubled, reaching heights unseen across the previous seasons. This unprecedented rise highlights the growing focus on ground game tactics within the conference, and a fact that big10 teams don’t necessarily need to run the ball to win. However, they had a sharp decline in 2023, but they are still maintaining higher levels than earlier years.\nIn contrast, other teams saw a more consistent, steady trend across the same period, with fewer dramatic shifts. While they showed some progress, they simply couldn’t keep up with the Big 10’s explosive rise.\nThis chart underscores the growing dominance of Big 10 teams in close rushing situations, a trend that could be reshaping the competitive landscape. However, the percentages still don’t go over 12%, so running the ball less than 100 yards a game is not recommended, but a team could still win.\nHere’s how I got this information :\n*Load libraries & data\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nlogs &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs1124.csv\")\n\nRows: 21592 Columns: 55\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (46): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n*Create a new dataframe that counts all the games in each season\n\ngames_per_season &lt;- logs|&gt;\n  group_by(Season) |&gt; summarise(count= n())\n\n*Create another new dataframe that counts all the games where the winning team rushed for less than 100 yards\n\nwinlosslogs &lt;- logs |&gt; \n  mutate(\n    winloss = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\n\nwins_rushes &lt;- winlosslogs |&gt; filter(winloss == 1) |&gt; filter(RushingYds &lt; 100) |&gt; group_by(Season)|&gt; summarise(count=n())\n\n*Join the two and calculate a percentage of small rushing win games\n\nsmall_rushing_win&lt;- inner_join(wins_rushes, games_per_season, by=\"Season\") |&gt; mutate(rushing_win_percentage = count.x/count.y *100)\n\nDoing the same thing for big10 teams:\n*Create a new dataframe that counts all the games in each season\n\nbig10_games &lt;- logs|&gt;\n  filter(Conference == \"Big Ten Conference\") |&gt; group_by(Season)|&gt; summarise(count= n())\n\n*Create another new dataframe that counts all the games where the winning team rushed for less than 100 yards\n\nbig10_rushes &lt;- winlosslogs |&gt; filter(Conference == \"Big Ten Conference\") |&gt; filter(winloss == 1) |&gt; filter(RushingYds &lt; 100) |&gt; group_by(Season)|&gt; summarise(count=n())\n\n*Join the two and calculate a percentage of small rushing win games\n\nbig_10_rushing_win&lt;- inner_join(big10_games, big10_rushes, by=\"Season\") |&gt; mutate(rushing_win_percentage = count.y/count.x *100)\n\n\nggplot() + geom_line(data = big_10_rushing_win, aes(x=Season, y =rushing_win_percentage), color=\"red\") + geom_line(data = small_rushing_win, aes(x=Season, y=rushing_win_percentage), color=\"orange\") + scale_x_discrete(limits = c(2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024)) + scale_y_continuous(limits = c(0,12)) + labs(\n  title = \"Comparison of Close Rushing Wins: Big 10 Teams vs. Other Teams (2011-2024)\"\n)\n\nWarning in scale_x_discrete(limits = c(2011, 2012, 2013, 2014, 2015, 2016, : Continuous limits supplied to discrete scale.\nℹ Did you mean `limits = factor(...)` or `scale_*_continuous()`?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Untitled.html",
    "href": "Untitled.html",
    "title": "Untitled",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nlogs &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\")\n\nRows: 1702 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nwinlosslogs &lt;- logs |&gt; \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\n\nwinlosslogs |&gt; \n  group_by(Team, Conference) |&gt; \n  summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards), \n    TotalWins = sum(wins)) |&gt; \n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -&gt; ypp\n\n`summarise()` has grouped output by 'Team'. You can override using the\n`.groups` argument.\n\n\n\nggplot() + \n  geom_point(\n    data=ypp, aes(x=OffensiveYPP, y=DefensiveYPP)\n    )\n\n\n\n\n\n\n\n\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins)\n    )\n\n\n\n\n\n\n\n\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins),\n    alpha = .3) + \n  scale_size(range = c(3, 8), name=\"Wins\")\n\n\n\n\n\n\n\n\n\nbigten &lt;- ypp |&gt; filter(Conference == \"Big Ten Conference\")\n\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\")\n\n\n\n\n\n\n\n\n\nypp |&gt; \n  ungroup() |&gt; \n  summarise(\n    offense = mean(OffensiveYPP), \n    defense = mean(DefensiveYPP)\n    )\n\n# A tibble: 1 × 2\n  offense defense\n    &lt;dbl&gt;   &lt;dbl&gt;\n1    5.74    5.60\n\n\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.737219) + \n  geom_hline(yintercept = 5.596573)\n\n\n\n\n\n\n\n\n\nlibrary(ggrepel)\n\nWarning: package 'ggrepel' was built under R version 4.3.3\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.737219) + \n  geom_hline(yintercept = 5.596573) +\n  geom_text_repel(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Team)\n  )\n\n\n\n\n\n\n\n\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.737219) + \n  geom_hline(yintercept = 5.596573) +\n  geom_text_repel(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Team)\n  ) +\n  labs(title=\"Is Maryland moving up to the Big Ten's best?\", subtitle=\"The Terps offense and defense puts it among ranked teams in the conference.\", caption=\"Source: NCAA | By Derek Willis\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )"
  }
]