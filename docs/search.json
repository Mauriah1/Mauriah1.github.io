[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/thirdandsix/index.html",
    "href": "posts/thirdandsix/index.html",
    "title": "Maryland data",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(cfbfastR)\n\n\n\n\nCode\ngamedata &lt;- load_cfb_pbp(\n  seasons = c(2019,2020,2021,2023,2024),\n  dbConnection = NULL,\n  tablename = NULL\n)\n\n\n\nFiltering out third and six data\n\\]\n\n\nCode\nthird_and_six &lt;- gamedata|&gt; filter(down == \"3\", distance == \"6\")\n\n\n\n\nCode\nthird_and_six |&gt; group_by(rush) |&gt; summarise(count=n()) \n\n\n# A tibble: 2 × 2\n   rush count\n  &lt;dbl&gt; &lt;int&gt;\n1     0  9396\n2     1  2570\n\n\nThere are 2570 rushing plays on 3rd and 6 and 9396 other type of plays that occur on 3rd and 6.\n\n\nPercentage of rushing plays on 3rd and 6.\n\n\nCode\n2570/11966*100 \n\n\n[1] 21.47752\n\n\n21% of plays on 3rd and 6 are run plays.\n\n\nWhat is the average yards gained?\n\n\nCode\nrushingdata &lt;- third_and_six |&gt; filter(rush == 1 ) \n\navg_yards_gained &lt;- rushingdata|&gt; \n  group_by(pos_team) |&gt; \n  summarise(avg_yards_gained = mean(yards_gained, na.rm = TRUE))\n\n\n\n\nHow many times has any team run on 3rd and 6 each year we have data for? Which team has done it the most?\n\n\nCode\ntotalrunson3and6 &lt;- rushingdata |&gt; group_by(pos_team, year) |&gt; summarise(count=n())\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\nCode\nyearbyyear &lt;-totalrunson3and6 |&gt; group_by(year) |&gt; summarise(count=n())\n\n\nIn 2019 there were 152 running plays, in 2020 there were 118 running plays, in 2021 there were 150 running plays, in 2023 there were 247 running plays and in 2024 there were 199 running plays on 3rd and 6.\nArmy has ran the most on 3rd and 6. In 2021 they ran the ball 17 times, on 3rd and 6.\n\n\nBar Chart of how many runs were on 3rd and 6 over the years.\n\n\nCode\nggplot() + \n  geom_bar(\n    data=yearbyyear, \n    aes(x=reorder(year, count),\n        weight=count)) + \n  labs(\n    title=\"How many runs occur on 3rd and 6?\", \n    x=\"Year\", \n    y=\"Count\") + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nMaryland data\n\n\nCode\nmd_data &lt;- third_and_six |&gt; filter(pos_team == \"Maryland\")\n\nmd_data |&gt; group_by(play_type, year) |&gt; summarise(count=n()) \n\n\n`summarise()` has grouped output by 'play_type'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 27 × 3\n# Groups:   play_type [11]\n   play_type                   year count\n   &lt;chr&gt;                      &lt;int&gt; &lt;int&gt;\n 1 Field Goal Good             2023     1\n 2 Fumble Recovery (Opponent)  2019     1\n 3 Interception Return         2021     1\n 4 Pass Incompletion           2020     4\n 5 Pass Incompletion           2021     3\n 6 Pass Incompletion           2024     2\n 7 Pass Reception              2019     2\n 8 Pass Reception              2020     4\n 9 Pass Reception              2021     1\n10 Pass Reception              2023     3\n# ℹ 17 more rows\n\n\n\nchanges over the years\n\n\nCode\nmdrushdata &lt;- rushingdata |&gt; filter(pos_team == \"Maryland\") |&gt; group_by(play_type, year) |&gt; summarise(count=n())\n\n\n`summarise()` has grouped output by 'play_type'. You can override using the\n`.groups` argument.\n\n\nIn 2021 and 2023 Maryland has ran the ball the most on 3rd and 6th, doing this 4 times each season. In 2019 and 2024 Maryland has not ran the ball much in 3rd and 6, only doing it 1 time so far.\n\n\nWhat percentage of the time does Maryland run the ball\n\n\nCode\n11/52*100\n\n\n[1] 21.15385\n\n\n21% percent of the time Maryland runs the ball on 3rd and 6, over the years. They had a total number of 11 rushing plays on third and six, and they had a total number of 52 plays in total on third and six.\n\n\nGraphing Maryland changes over the years\n\n\nCode\nggplot() + \n  geom_bar(\n    data=mdrushdata, \n    aes(x=reorder(year, count),\n        weight=count)) + \n  labs(\n    title=\"How many runs occur on 3rd and 6? for Maryland\", \n    x=\"Year\", \n    y=\"Count\") + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThis shows a lot!!! Maryland didn’t typically run the ball in 2019 that much on third and six, but in 2021 and 2023 they did more. However after that horrible play last year, it seems that Maryland has went back to not running the ball that much on third and six. However Maryland’s average for how many rushing plays they have is the same average as the average for total number of rushing plays for all teams, so they don’t typically run the ball that much on third and six like many other teams."
  },
  {
    "objectID": "posts/Volleyballpost/index.html",
    "href": "posts/Volleyballpost/index.html",
    "title": "Maryland’s Volleyball Points Explained",
    "section": "",
    "text": "###Load Libraries\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(waffle)\n\nmatches24 &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2024.csv\")\n\n\nRows: 5867 Columns: 39\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (34): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nSeperating Maryland’s Data\n\n\nCode\nmd_data &lt;- matches24 |&gt; filter(team == \"Maryland\")\n\n\n\n\nCalculating the total number of kills, blocks, aces and opponent errors for Maryland\n\n\nCode\ntotal_kills &lt;- sum(md_data$kills)\ntotal_blocks &lt;- sum(md_data$block_solos)\ntotal_aces &lt;- sum(md_data$aces)\ntotal_opponent_errors &lt;- sum(md_data$defensive_errors)\n\nmd &lt;- c(\"total_kill\"=716, \"total_blocks\"=25, \"total_aces\"=127, \"total_opponent_error\"=322)\n\n\n\n\nMaking a waffle chart for Maryland kills,blocks,aces and opponent errors.\n\n\nCode\nwaffle(\n        md/2, \n        rows = 10, \n        title=\"Maryland's stats\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"green\", \"red\",\"orange\", \"blue\")\n)\n\n\n\n\n\n\n\n\n\n\n\nCreating a waffle chart for Nebraska to Compare\n\n\nCode\nnb_data &lt;- matches24 |&gt; filter(team == \"Nebraska\")\n\ntotal_kills &lt;- sum(nb_data$kills)\ntotal_blocks &lt;- sum(nb_data$block_solos)\ntotal_aces &lt;- sum(nb_data$aces)\ntotal_opponent_errors &lt;- sum(nb_data$defensive_errors)\n\nnb &lt;- c(\"total_kill\"=701, \"total_blocks\"=23, \"total_aces\"=71, \"total_opponent_error\"=283)\n\nwaffle(\n        nb/2, \n        rows = 10, \n        title=\"Nebraska's stats\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"green\", \"red\",\"orange\", \"blue\")\n)\n\n\n\n\n\n\n\n\n\nComparing the differences between Maryland and Nebraska\n\n\nCode\nmd &lt;- c(\"total_kill\"=716, \"total_blocks\"=25, \"total_aces\"=127, \"total_opponent_error\"=322)\nnb &lt;- c(\"total_kill\"=701, \"total_blocks\"=23, \"total_aces\"=71, \"total_opponent_error\"=283, 112)\n\n\n\n\nCode\nwaffle(\n        nb/2, \n        rows = 10, \n        title=\"Nebraska's stats\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"green\", \"red\",\"orange\", \"blue\", \"white\")\n)\n\n\n\n\n\n\n\n\n\nCode\nwaffle(\n        md/2, \n        rows = 10, \n        title=\"Maryland's stats\", \n        xlab=\"1 square = 1 yard\", \n        colors = c(\"green\", \"red\",\"orange\", \"blue\")\n)\n\n\n\n\n\n\n\n\n\nIn conclusion, most of Maryland’s points go towards kills, as this is the case for many other schools. Compared to Nebraska, Maryland has 15 more kills than Nebraska.They have around the same number of blocks, which showed me that blocks aren’t a regular statistic to gain. Aces though, Maryland is leading Nebraska with a 56 point deference. And in opponent errors it looks like Maryland’s opponents have made 39 more mistakes than Nebraska’s opponents. Maryland really thrives off their kills and aces."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/bigtenplays/index.html",
    "href": "posts/bigtenplays/index.html",
    "title": "Average Plays for the Big10",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nLogs23 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\")\n\n\nRows: 1702 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nLogs24 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs24.csv\")\n\n\nRows: 704 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nFilter out each big 10 team offensive play in the year of 2023\n\n\nCode\n  big10teams23 &lt;- Logs23|&gt; \n  group_by(Conference, Team) |&gt; \n  summarise(\n   OffensivePlays= sum(OffensivePlays),\n  ) |&gt;  filter(Conference == \"Big Ten Conference\") \n\n\n`summarise()` has grouped output by 'Conference'. You can override using the\n`.groups` argument.\n\n\nAll teams are mostly over 800 plays for the 2023 season besides Nebraska and Michigan State, Penn State and Michigan are really high in number of plays with 928 and 924 plays.\n\n\nFilter out each big 10 team offensive play in the year of 2024\n\n\nCode\nbig10teams24 &lt;- Logs24 |&gt; group_by(Conference, Team) |&gt; \n  summarise(\n    OffensivePlays= sum(OffensivePlays)\n  ) |&gt;  filter(Conference == \"Big Ten Conference\") \n\n\n`summarise()` has grouped output by 'Conference'. You can override using the\n`.groups` argument.\n\n\nThe season has not concluded so there is less data than in 2023, but from the data so far most teams have had over 300 plays besides UCLA and Purdue, while Indiana and Nebraska are at the top of the list.\n\n\nFind average plays for big 10 teams in 2023\n\n\nCode\navg_offensive_plays_2023 &lt;- big10teams23 |&gt;\n  group_by(Team) |&gt; \n  summarise(avg_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\n\n\nFind average plays for big 10 teams in 2023\n\n\nCode\navg_offensive_plays_2024 &lt;- big10teams24 |&gt; \n  group_by(Team) |&gt; \n  summarise(avg_plays = mean(OffensivePlays, na.rm = TRUE))\n\n\n\n\nPlot the averages for the number of plays for the 2023 season\n\n\nCode\nggplot(avg_offensive_plays_2023, aes(x = reorder(Team, -avg_plays), y = avg_plays)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Average Offensive Plays per Game in 2023\", x = \"Team\", y = \"Average Plays\") +\n  theme_minimal() + \n  coord_flip()\n\n\n\n\n\n\n\n\n\nPenn State and Michigan, as expected is very high on the list, Michigan just won the championship. But Maryland is fourth from the top which shows they make a pretty good amount of plays. On the other hand Nebraska is very low which can show many things like maybe they had a problem with penalties, and couldn’t run a smooth offense or maybe there offense of line wasn’t good and the quaterback cant make many plays. The biggest lesson of this chart is that most of the teams who make more plays have a better record and tend to have a better season.\n\n\nPlot the averages for the number of plays for the 2024 season\n\n\nCode\nggplot(avg_offensive_plays_2024, aes(x = reorder(Team, -avg_plays), y = avg_plays)) +\n  geom_bar(stat = \"identity\", fill = \"darkorange\") +\n  labs(title = \"Average Offensive Plays per Game in 2024\", x = \"Team\", y = \"Average Plays\") +\n  theme_minimal() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nThe season has not concluded so there is much less plays compared to the year in 2023, however Nebraska looks to improve by a lot more compared to the last season. They are in the top of this chart, which means they are making many plays. This could be a significant increase unless they start the season off strong, moving their offense then later in the year get startled. However, Maryland is still near the top off plays which is pretty good."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/firstpost/index.html",
    "href": "posts/firstpost/index.html",
    "title": "First blog post",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nattendance &lt;- read_csv('https://dwillis.github.io/sports-data-files/attendance.csv')\n\n\nRows: 146 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Institution, Conference\ndbl (11): 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sportsblog",
    "section": "",
    "text": "Why the Warriors Thrive Without a Fixed Starting Lineup\n\n\n\n\n\n\n\n\n\n\n\nNov 20, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nKevin Willard Teams Shooting From The Three Pointer\n\n\n\n\n\n\n\n\n\n\n\nNov 13, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nHas the Maryland’s Basketball Team solved its shooting porblem?\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nHas The Big Ten Playing Style Changed?\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nWhat does 2023 stats say about Maryland’s aces?\n\n\n\n\n\n\n\n\n\n\n\nOct 24, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nWith Maryland’s breath taking win over USC (29-28), could one say that Maryland is improving?\n\n\n\n\n\n\n\n\n\n\n\nOct 23, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nHow often can a team run less than 100 yards and still win?\n\n\n\n\n\n\n\n\n\n\n\nOct 22, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland’s Volleyball Points Explained\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nAverage Plays for the Big10\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nFirst blog post\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nthirdandsix\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nMauriah Allen\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 30, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/closerushingyards/index.html",
    "href": "posts/closerushingyards/index.html",
    "title": "How often can a team run less than 100 yards and still win?",
    "section": "",
    "text": "From 2011 to 2019, the number of close rushing wins for both Big 10 teams (red line) and others (orange line) followed a relatively similar, stable path, with Big 10 teams trailing slightly. However, starting in 2020, something remarkable happened. Big 10 teams began to pull ahead, surging to a peak in 2022 that far surpassed their previous years. Their close rushing wins nearly doubled, reaching heights unseen across the previous seasons. This unprecedented rise highlights the growing focus on ground game tactics within the conference, and a fact that big10 teams don’t necessarily need to run the ball to win. However, they had a sharp decline in 2023, but they are still maintaining higher levels than earlier years.\nIn contrast, other teams saw a more consistent, steady trend across the same period, with fewer dramatic shifts. While they showed some progress, they simply couldn’t keep up with the Big 10’s explosive rise.\nThis chart underscores the growing dominance of Big 10 teams in close rushing situations, a trend that could be reshaping the competitive landscape. However, the percentages still don’t go over 12%, so running the ball less than 100 yards a game is not recommended, but a team could still win.\nHere’s how I got this information :\n*Load libraries & data\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nlogs &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs1124.csv\")\n\nRows: 21592 Columns: 55\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (46): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n*Create a new dataframe that counts all the games in each season\n\ngames_per_season &lt;- logs|&gt;\n  group_by(Season) |&gt; summarise(count= n())\n\n*Create another new dataframe that counts all the games where the winning team rushed for less than 100 yards\n\nwinlosslogs &lt;- logs |&gt; \n  mutate(\n    winloss = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\n\nwins_rushes &lt;- winlosslogs |&gt; filter(winloss == 1) |&gt; filter(RushingYds &lt; 100) |&gt; group_by(Season)|&gt; summarise(count=n())\n\n*Join the two and calculate a percentage of small rushing win games\n\nsmall_rushing_win&lt;- inner_join(wins_rushes, games_per_season, by=\"Season\") |&gt; mutate(rushing_win_percentage = count.x/count.y *100)\n\nDoing the same thing for big10 teams:\n*Create a new dataframe that counts all the games in each season\n\nbig10_games &lt;- logs|&gt;\n  filter(Conference == \"Big Ten Conference\") |&gt; group_by(Season)|&gt; summarise(count= n())\n\n*Create another new dataframe that counts all the games where the winning team rushed for less than 100 yards\n\nbig10_rushes &lt;- winlosslogs |&gt; filter(Conference == \"Big Ten Conference\") |&gt; filter(winloss == 1) |&gt; filter(RushingYds &lt; 100) |&gt; group_by(Season)|&gt; summarise(count=n())\n\n*Join the two and calculate a percentage of small rushing win games\n\nbig_10_rushing_win&lt;- inner_join(big10_games, big10_rushes, by=\"Season\") |&gt; mutate(rushing_win_percentage = count.y/count.x *100)\n\n\nggplot() + geom_line(data = big_10_rushing_win, aes(x=Season, y =rushing_win_percentage), color=\"red\") + geom_line(data = small_rushing_win, aes(x=Season, y=rushing_win_percentage), color=\"orange\") + scale_x_discrete(limits = c(2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024)) + scale_y_continuous(limits = c(0,12)) + labs(\n  title = \"Comparison of Close Rushing Wins: Big 10 Teams vs. Other Teams (2011-2024)\"\n)\n\nWarning in scale_x_discrete(limits = c(2011, 2012, 2013, 2014, 2015, 2016, : Continuous limits supplied to discrete scale.\nℹ Did you mean `limits = factor(...)` or `scale_*_continuous()`?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Untitled.html",
    "href": "Untitled.html",
    "title": "Untitled",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nlogs &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\")\n\nRows: 1702 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nwinlosslogs &lt;- logs |&gt; \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\n\nwinlosslogs |&gt; \n  group_by(Team, Conference) |&gt; \n  summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards), \n    TotalWins = sum(wins)) |&gt; \n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -&gt; ypp\n\n`summarise()` has grouped output by 'Team'. You can override using the\n`.groups` argument.\n\n\n\nggplot() + \n  geom_point(\n    data=ypp, aes(x=OffensiveYPP, y=DefensiveYPP)\n    )\n\n\n\n\n\n\n\n\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins)\n    )\n\n\n\n\n\n\n\n\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins),\n    alpha = .3) + \n  scale_size(range = c(3, 8), name=\"Wins\")\n\n\n\n\n\n\n\n\n\nbigten &lt;- ypp |&gt; filter(Conference == \"Big Ten Conference\")\n\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\")\n\n\n\n\n\n\n\n\n\nypp |&gt; \n  ungroup() |&gt; \n  summarise(\n    offense = mean(OffensiveYPP), \n    defense = mean(DefensiveYPP)\n    )\n\n# A tibble: 1 × 2\n  offense defense\n    &lt;dbl&gt;   &lt;dbl&gt;\n1    5.74    5.60\n\n\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.737219) + \n  geom_hline(yintercept = 5.596573)\n\n\n\n\n\n\n\n\n\nlibrary(ggrepel)\n\nWarning: package 'ggrepel' was built under R version 4.3.3\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.737219) + \n  geom_hline(yintercept = 5.596573) +\n  geom_text_repel(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Team)\n  )\n\n\n\n\n\n\n\n\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.737219) + \n  geom_hline(yintercept = 5.596573) +\n  geom_text_repel(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Team)\n  ) +\n  labs(title=\"Is Maryland moving up to the Big Ten's best?\", subtitle=\"The Terps offense and defense puts it among ranked teams in the conference.\", caption=\"Source: NCAA | By Derek Willis\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )"
  },
  {
    "objectID": "posts/mdfootballypp/index.html",
    "href": "posts/mdfootballypp/index.html",
    "title": "With Maryland’s breath taking win over USC (29-28), could one say that Maryland is improving?",
    "section": "",
    "text": "Maryland’s Offense and Defense rankings over the last 5 years have been in the best condition, compared the other schools in the NCAA. Can this give one hope for the 2024 season?\nIn 2022 and 2023 Maryland had a total of 8 wins, which has been the most wins the football team has ever had. Their offensive and defensive stats, match this performance. However, Maryland’s defense has not been the best, their performance fluctuations in efficiency throughout the years, and that could potentially lead to problems for the team this year.\nHere’s how I got to my conclusion and chart:\n*Load Data & Libraries\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggrepel)\n\nWarning: package 'ggrepel' was built under R version 4.3.3\n\n\n\nlogs &lt;- read_csv(\"https://thescoop.org/sports-data-files/footballlogs1124.csv\")\n\nRows: 21592 Columns: 55\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (46): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n*Create a win loss data frame and add in defensive and offensive ypp\n\nwinlosslogs &lt;- logs |&gt; \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\n\nwinlosslogs |&gt; \n  group_by(Team, Conference, Season) |&gt; \n  summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards), \n    TotalWins = sum(wins)) |&gt; \n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -&gt; ypp\n\n`summarise()` has grouped output by 'Team', 'Conference'. You can override\nusing the `.groups` argument.\n\n\n*Filtering out Maryland’s Data\n\nmd &lt;- ypp |&gt; filter(Team == \"Maryland\")\n\n2012 stands out as a year of struggles. Maryland’s defense allowed more yards per play than almost any other season, contributing to a low win total. This season’s placement on the lower end of both metrics highlights how a porous defense significantly impacted the team’s chances of success.\nConversely, 2019 saw Maryland’s defense make significant improvements in YPP, correlating with a higher win total. This defensive upswing was one of the brighter moments over the past ten years, showing the importance of limiting opponent yards to win games.\n\nypp |&gt; \n  ungroup() |&gt; \n  summarise(\n    offense = mean(OffensiveYPP), \n    defense = mean(DefensiveYPP)\n    )\n\n# A tibble: 1 × 2\n  offense defense\n    &lt;dbl&gt;   &lt;dbl&gt;\n1    5.74    5.61\n\n\nAs you can see, Maryland’s mean defensive ypp shows that the team allows for a lot of points, it’s even pretty close to how many yards the offensive receives, which is not good at all!\n\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=md, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.740424) + \n  geom_hline(yintercept = 5.609849) +\n  geom_text_repel(\n    data=md, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Season)\n  ) +\n  labs(caption=\"Source: NCAA | By Mauriah Allen\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\n\n\n\nThe 2024 data is still in progress, and while both the offense and defense have shown average performance levels, the remaining games will determine whether Maryland can turn this into a winning season or continue the pattern of mediocrity seen in the last few years. The key to success will likely lie in whether they can improve their defense further, as that has historically been the factor most closely tied to their best seasons.\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/volleyballaces/index.html",
    "href": "posts/volleyballaces/index.html",
    "title": "What does 2023 stats say about Maryland’s aces?",
    "section": "",
    "text": "Aces can be critical factor in a volleyball team’s success, but the University of Maryland volleyball team struggled in that area last season. Lilly Gunter averaged 1.3 aces a game and is the only athlete on the team who averaged over 1 ace a game. Maryland Volleyball, had a very bad year in terms of ace percentage. They ranked 8th in the big 10 conference last year and this could be one of the factors that led to that.\nHere’s how I got to my conclusion\n*load data & install packages\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(ggrepel)\n\nWarning: package 'ggrepel' was built under R version 4.3.3\n\nlibrary(ggbeeswarm)\n\n\nset.seed(1234)\n\n\n suppressPackageStartupMessages (players &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_playerstats_2023.csv\"))\n\nRows: 5174 Columns: 36\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (7): team, full_name, roster_name, last_name, first_name, yr, pos\ndbl (26): ncaa_id, season, jersey, feet, inches, gp, gs, mp, s, kills, error...\nlgl  (3): ms, total_blocks, tb\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n*Filtering out players who have over 20 games played & finding the average aces a season\n\nactiveplayers &lt;- players |&gt; filter(gp&gt;20, !is.na(aces)) \n\n\nactiveplayers &lt;- activeplayers |&gt; mutate(acepct=aces/gp)\n\n\nsummary(activeplayers$aces)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    4.00   15.00   15.82   25.00   73.00 \n\n\n\nservers &lt;- activeplayers |&gt; filter(aces &gt; 25)\n\n*plotting the averages of aces for the 2023 season\n\nggplot() + geom_beeswarm(data=servers, aes(x=pos, y=acepct), color=\"grey\")\n\n\n\n\n\n\n\n\nFrom this chart, right side’s and middle’s do not serve the ball the much, which is pretty interesting but not so surprising. The middles and right side position are a offensive heavy positions. When a athletes serves, they are forced to be playing the defensive position, which is not known off by right sides and middles (unless the middle is serving because the libero already served for the other middle).\n*Now filtering out Maryland’s Data\n\numd &lt;- activeplayers |&gt; \n  filter(team == \"Maryland Terrapins, Terps\") |&gt; \n  filter(aces&gt;25) |&gt; \n  arrange(desc(acepct))\nggplot() + \n  geom_beeswarm(\n    data=servers, \n    groupOnX=TRUE, \n    aes(x=pos, y=acepct), color=\"grey\") + \n  geom_beeswarm(\n    data=umd, \n    groupOnX=TRUE, \n    aes(x=pos, y=acepct), color=\"red\") +\n  geom_text_repel(\n    data=umd, \n    aes(x=pos, y=acepct, label=full_name))\n\nWarning: The `groupOnX` argument of `geom_beeswarm()` is deprecated as of ggbeeswarm\n0.7.1.\nℹ ggplot2 now handles this case automatically.\n\n\n\n\n\n\n\n\n\nOnly three Maryland players recorded more than 25 aces throughout the season, and two of them averaged less than one ace per game. With a schedule of over 30 matches, each typically lasting three sets, the lack of aces was a significant shortcoming for the team.\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/presentation/presentation.html",
    "href": "posts/presentation/presentation.html",
    "title": "sportsblog",
    "section": "",
    "text": "The Plotting avg_height compared to digs chart is kind of wild, but I think you’ll need to take another stab at this one. Here’s why: the dots at the very low end are average heights of 0, which should be excluded. I’d also remove the teams and just look at height of players (and maybe not even averages, but all of them).\nI think you could look at average height of conferences and teams in other charts, but for this (and for your model) you’ll want to remove rows where the height is 0 and perhaps limit it to players who actually log significant minutes (however you define that)."
  },
  {
    "objectID": "posts/runningonempty/index.html",
    "href": "posts/runningonempty/index.html",
    "title": "Has The Big Ten Playing Style Changed?",
    "section": "",
    "text": "The Big Ten conference, once known as a run heavy conference, is turning into a pass heavy conference. The conference has adapted the idea that running the ball well doesn’t always amount to how much a team will win.\nHere’s How I got to my conclusion:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nlogs &lt;- read_csv(\"https://www.thescoop.org/sports-data-files/footballlogs24.csv\")\n\nRows: 1136 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlogs&lt;-logs|&gt; mutate(GameTick = as.character(Game))\n\n\nlogs |&gt; group_by(Conference = \"Big Ten Conference\") |&gt; summarise(mean(RushingAvg))\n\n# A tibble: 1 × 2\n  Conference         `mean(RushingAvg)`\n  &lt;chr&gt;                           &lt;dbl&gt;\n1 Big Ten Conference               4.35\n\n\n\nlogs &lt;- logs |&gt; mutate(PassingAvg = PassingYds/PassingAtt)\n\nlogs|&gt; group_by(Conference = \"Big Ten Conference\") |&gt; summarise(mean(PassingAvg))\n\n# A tibble: 1 × 2\n  Conference         `mean(PassingAvg)`\n  &lt;chr&gt;                           &lt;dbl&gt;\n1 Big Ten Conference               7.64\n\n\nThe Big Ten has definitely started to shift into a pass heavy conference. Teams like Michigan State and Ohio State that really made the Big Ten, a run heavy conference has fell behind in terms of the run game.\n\nbig10logs &lt;- logs |&gt; filter(Conference == \"Big Ten Conference\") |&gt; group_by(TeamFull, GameTick, Opponent, Outcome) |&gt; summarise(RushingAvg = RushingAvg) \n\n`summarise()` has grouped output by 'TeamFull', 'GameTick', 'Opponent'. You can\noverride using the `.groups` argument.\n\n\n\nggplot() + \n  geom_line(data=big10logs, aes(x=GameTick, y=RushingAvg, group=TeamFull)) + \n  scale_y_continuous(limits = c(0, 10))\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\nThe Washington Huskies are ranked in the middle of the Big Ten Conference, however they have only have three games where there rushing average was above 4.3, which is the conference average for rushing. However they are really consistent. This shows that running well doesn’t always amount a super successful team.\nPurdue on the hand, is the worst team in the conference and their rush average is pretty good. They have had a total of four games this season where they have averaged over 4.3, and they even had a standout game against Orgeon where there rushing average was 8.8.\nLooking at Maryland:\n\nggplot() + \n  geom_hline(yintercept=4.362821    , color=\"blue\") + \n  geom_line(data=big10logs, aes(x=GameTick, y=RushingAvg, group=TeamFull)) + \n  scale_y_continuous(limits = c(0, 10)) + \n  facet_wrap(~TeamFull) + \n  labs(\n    title=\"Maryland Lags Behind Top Big 10 Teams In Rushing Averages\", \n    subtitle = \"The terps have only have topped the conference's average twice\",\n    x=\"GameTick\", \n    y=\"RushingAvg\") + \n  theme_minimal()\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\nThe Terps have no consistency in their run game. They have had three games where their rushing average has been below 3. They even had a season worst rushing average of 1.79, which was in a game against Northwestern.\nMaryland football is definitely struggling in rushing average area. The Terps have only ran the ball twice over the conference average against Connecticut and Villanova, and these two teams are projected to be highly performing football programs. However, both of these games amounted to wins.\nRunning the ball doesn’t always mean you will win as this is shown with teams like Purdue and Washington, but it does give you a better chance at winning. The conference within itself which in previous years may have been known for the run, has shifted into pass heavy conference this season.\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/mbbearlyszn/index.html",
    "href": "posts/mbbearlyszn/index.html",
    "title": "Has the Maryland’s Basketball Team solved its shooting porblem?",
    "section": "",
    "text": "The Terps basketball season debut happened against Manhattan on Monday. The Terps won the game, however the most exciting factor was the freshman recruit Derik Queen. He averaged 22 points and 20 rebounds. This can certainly give the Terps fans some hope, as they have struggled in previous years with their shooting average.\nHowever, determining a teams winning efficiency based on early games can never certainly be correct. I will show you however the difference in how many points Maryland allowed compared to how many the got, over the course of this season and previous ones.\nHere’s what I did:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggalt)\n\nRegistered S3 methods overwritten by 'ggalt':\n  method                  from   \n  grid.draw.absoluteGrob  ggplot2\n  grobHeight.absoluteGrob ggplot2\n  grobWidth.absoluteGrob  ggplot2\n  grobX.absoluteGrob      ggplot2\n  grobY.absoluteGrob      ggplot2\n\n\n\nlogs &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/dwillis.github.io/main/docs/sports-data-files/cbblogs1525.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 109585 Columns: 51\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (9): Season, TeamFull, Opponent, HomeAway, W_L, URL, Conference, Team,...\ndbl  (39): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\nlgl   (2): Blank, season\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nmdearly &lt;- logs |&gt; filter(Team == \"Maryland\", Game &lt; 7) \nmdearlydt &lt;- mdearly |&gt; group_by(Season) |&gt; summarise( AvgFGPCT = mean(TeamFGPCT*100), AvgOppFGPCT = mean(OpponentFGPCT*100))\n\nMaryland shooting percentage from the field was only 44 percent in the game against Manhattan, which is just average. This isn’t something that is tremendously significant but it could give the Terps some hope from how they shot last season.\n\nggplot() + \n  geom_dumbbell(\n    data=mdearlydt, \n    aes(y=Season, x=AvgFGPCT, xend=AvgOppFGPCT),\n    size = 1,\n    color = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") + \n  labs(\n    title=\"Maryland's offense is shooting better than last season\", \n    subtitle = \"Although very early, the terps shooting perctenage is looking solid\",\n    x=\"AvgFGPCT\", \n    y=\"AvgOppFGPCT\") + \n  theme_minimal()\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\n\n\n\n\nMaryland Basketball really struggled with shooting last season and this chart really shows it. The seasons average was not good, they shot 39 percent from the field and allowed their opponents to shoot 40 percent, this was the franchise worst shooting percentage average ever.\nThe Terps had an outstanding year in the 2015-2016 season, which is arguably Mello Trembles best year at the university. The team shot 53 percent from the field and held their opponents to 42 percent.\nThis season, the Terps is showing they have a defense which is really good for the Terp fans. Their opponents average for shooting was only 27 percent from the field. Their shooting percentage was pretty average at only 44 percent but that is better than their last season overall shooting average.\nThe Terps in previous years have had pretty good defense as well, they have had 4 other seasons where their opponents shooting percentage was under 40. The team has had an promising start to their season, however it is just honestly to early to tell how well they will shoot compared to their opponents.\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/kevinwillard/index.html",
    "href": "posts/kevinwillard/index.html",
    "title": "Kevin Willard’s Teams: Fearless from Three",
    "section": "",
    "text": "Maryland Basketball has won its first three games, and while some may chalk up the early success to luck or relatively easy competition, others point to the team’s direction under head coach Kevin Willard. Willard, who joined Maryland in 2022 after 12 seasons at Seton Hall, brings a distinctive style to the court.\nA defining characteristic? Aggression from the perimeter. Willard’s teams aren’t afraid to take three-pointers, a mentality he fostered at Seton Hall and brought with him to College Park. Under his leadership, players have the green light to shoot from deep.\nIn this blog I will explore how many 3 pointers Willards teams were actually taking and if weather more three pointers mean more success.\nHere’s how I got to my conclusion:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\n\n\nlogs &lt;- read_csv(\"https://thescoop.org/sports-data-files/cbblogs1524.csv\")\n\nRows: 98161 Columns: 51\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (9): Season, TeamFull, Opponent, HomeAway, W_L, URL, Conference, Team,...\ndbl  (39): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\nlgl   (2): Blank, season\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nmd_coaching &lt;- logs |&gt; filter(Team == \"Maryland\" ) |&gt; filter(Season %in% c( \"2022-2023\", \"2023-2024\", \"2024-2025\"))\n\nsetonhall_coaching &lt;- logs |&gt; filter(Team == \"Seton Hall\") |&gt; filter(Season %in% c(\"2015-2016\", \"2016-2017\", \"2017-2018\", \"2018-2019\", \"2019-2020\", \"2020-2021\", \"2021-2022\"))\n\n\nmd_3pt &lt;- md_coaching |&gt; group_by(Season, Team3P, Team3PA, Team3PPCT) |&gt; summarise(count= n())\n\n`summarise()` has grouped output by 'Season', 'Team3P', 'Team3PA'. You can\noverride using the `.groups` argument.\n\nmd_3pt &lt;- md_3pt  |&gt; group_by(Season) |&gt; summarise(avg3pt = mean(Team3P), avg3ptatt = mean(Team3PA), avg3ppct = mean(Team3PPCT *100))\n\n\nseton3pt &lt;- setonhall_coaching |&gt; group_by(Season, Team3P, Team3PA, Team3PPCT) |&gt; summarise(count= n())\n\n`summarise()` has grouped output by 'Season', 'Team3P', 'Team3PA'. You can\noverride using the `.groups` argument.\n\nseton3pt &lt;- seton3pt  |&gt; group_by(Season) |&gt; summarise(avg3pt = mean(Team3P), avg3ptatt = mean(Team3PA), avg3ppct = mean(Team3PPCT *100))\n\nA look back at his years at Seton Hall reveals that Willard’s teams consistently attempted a high volume of three-pointers. In all but two seasons, his squads averaged over 20 three-point attempts per game, putting them among the leaders in the Big East for perimeter shooting. This focus wasn’t necessarily about shooting percentages, which ranged from 28% to 37%—not elite but solid enough to keep defenses wary. Instead, Willard emphasized taking good looks and maintaining confidence, no matter the shooting slump.\nWhile Kevin Willard’s teams may not always rank among the most accurate from three, they are undeniably prolific in their attempts. The approach underscores his commitment to stretching defenses and creating opportunities through sheer volume, a hallmark that has come to define his style.\nIt’s early in his tenure at Maryland, but fans can already expect this aggressive three-point mindset to become part of the Terps’ identity. Kevin Willard teams may not always make every shot from deep, but they will take them—because, under Willard, that’s the game plan.\n\nggplot() +\n  geom_point(data= md_3pt, aes(x= Season, y= avg3ptatt)) + geom_point(data=seton3pt, aes(x=Season, y=avg3ptatt, color= \"red\")) +coord_flip() + \n  labs(\n    title=\"Kevin Williard encourages his players to take the 3 pointer\", \n    subtitle = \"Willard teams usually average more than 20 attempts a game\",\n    x=\"Season\", \n    y=\"Avg3ptatt\") + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/nbalineups/index.html",
    "href": "posts/nbalineups/index.html",
    "title": "Why the Warriors Thrive Without a Fixed Starting Lineup",
    "section": "",
    "text": "The Golden State Warriors are the number one in the Western Conference, they are one of the top scoring teams this season averaging 119 points a game. The Golden State Warriors have answered the question if they were going to be good this season, they are.\nThey are number one in their packed conference which is especially important despite all their lineup changes in the 2024-2025 season. The 10-3 team has showcased remarkable adaptability in the early stages of the 2024-25 NBA season, employing a variety of starting lineups under head coach Steve Kerr.\nIn this textbook you will see how the Golden State Warriors have sill performed well no matter who was in the starting line up.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(hoopR)\n\n\ncurrent &lt;- read_rds(\"current.rds\")\n\ncurrent &lt;- current |&gt; filter(TEAM_ABBREVIATION == \"GSW\")\n\ncurrent &lt;- current |&gt; \n  mutate(across(6:57, ~ as.numeric(as.character(.))))\n\n\ngswlineup &lt;- current |&gt; group_by(GROUP_NAME, GP, PTS, MIN, W_PCT, FG_PCT, FG3_PCT, W, L) |&gt; summarise(PTS=PTS) |&gt;  arrange(desc(PTS)) \n\n`summarise()` has grouped output by 'GROUP_NAME', 'GP', 'PTS', 'MIN', 'W_PCT',\n'FG_PCT', 'FG3_PCT', 'W'. You can override using the `.groups` argument.\n\nGSWPTS &lt;- current|&gt; arrange(desc(PTS)) |&gt; select(GROUP_NAME, PTS) |&gt; top_n(7)\n\nSelecting by PTS\n\n\n\nggplot() +\n  geom_bar(\n    data = GSWPTS,\n    aes(x= \n     reorder(GROUP_NAME, PTS) , \n        weight = PTS)\n  ) + coord_flip() +\n  labs(title=\"Which lineup is more efficent for Golden State Warriors?\", subtitle=\"The Warriors most points come from the lineup with named stars\", caption=\"Source: NBA | By Mauriah Allen\", x= \"lineups\",  y = \"Points\")  + theme_minimal() + theme(\n    plot.title = element_text(hjust = 4.3, size = 10, face = \"bold\"),\n    axis.title = element_text(hjust = 7, size = 8), \n    plot.subtitle = element_text(size=10, hjust = 3.5), \n    panel.grid.minor = element_blank()\n    ) \n\n\n\n\n\n\n\n\nOne of the standout elements of the Warriors’ fluid lineups has been their ability to generate offense from a wide array of players. Stephen Curry remains the undisputed leader on the court, consistently delivering game-changing performances. However, the team’s scoring doesn’t solely rely on him. Jonathan Kuminga, when in the starting lineup, has shown flashes of brilliance, using his athleticism and energy to put up points.\nAndrew Wiggins, now stepping into a shooting guard role, has also contributed significantly to the scoring load, adjusting seamlessly to a position he hadn’t played in years. Players like Buddy Hield and Moses Moody have provided much-needed shooting and scoring punch, particularly during stretches when injuries have forced starters to the sidelines.\nEven Trayce Jackson-Davis, the rookie center, has made an impact. His contributions in the paint, combined with his ability to finish around the rim, have added another layer to the Warriors’ offensive game plan. Off the bench, Brandin Podziemski and Lindy Waters III have shown they can step up when called upon, providing important baskets and maintaining the team’s offensive rhythm.\nThis collective scoring effort is a testament to the Warriors’ depth. Rather than relying on a singular player or a static starting five, Golden State has embraced a next-man-up mentality. This approach not only keeps opponents guessing but also ensures that fresh legs and diverse skill sets are constantly being injected into the game. The result? A Warriors team that’s dangerous on any given night, regardless of who’s listed in the starting lineup.\n\nGSWFGPCTS &lt;- current |&gt; arrange(desc(FG_PCT)) |&gt; select(GROUP_NAME, FG_PCT, FG3_PCT) |&gt; top_n(7)\n\nSelecting by FG3_PCT\n\n\n\nggplot() +\n  geom_bar(\n    data = GSWFGPCTS,\n    aes(x= \n     reorder(GROUP_NAME, FG_PCT) , \n        weight = FG_PCT)\n  ) + coord_flip() +\n  labs( \n    title=\"Which lineup shot the best for Golden State Warriors?\", subtitle=\"The Warriors most successful lineup has no Stephen Curry\", caption=\"Source: NBA | By Mauriah Allen\", \n    x=\"Lineups\", \n    y = \"Fgpcts\")  + theme_minimal() + theme(\n    plot.title = element_text(hjust = 4.3, size = 10, face = \"bold\"),\n    axis.title = element_text(hjust = 7, size = 8), \n    plot.subtitle = element_text(size=10, hjust = 4.1), \n    panel.grid.minor = element_blank()\n    ) \n\n\n\n\n\n\n\n\nSubsequent injuries to key players, including Curry, Wiggins, and De’Anthony Melton, necessitated further adjustments. This opened opportunities for players such as Buddy Hield, Moses Moody, Brandin Podziemski, and Lindy Waters III to step into starting roles.\nUpon the return of the injured players, Kerr appeared to establish a consistent starting lineup: Curry at point guard, Melton at shooting guard, Wiggins at small forward, Green at power forward, and Jackson-Davis at center. However, this stability was short-lived, as Melton sustained a sprained ACL, sidelining him for an extended period. In response, Kerr has positioned Waters as the starting shooting guard.\nDespite these frequent changes, the Warriors have maintained a strong performance record. This flexibility in lineup configurations underscores the team’s depth and Kerr’s strategic acumen, allowing Golden State to remain competitive regardless of the starting five on any given night.\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]